
public class LinkedList {
	private Node head; // 첫번째 노드 head
	private Node tail; // 마지막 노드 tail
	private int size = 0; // 리스트에 노드가 추가되면 값이 하나씩 증가함
	
	// 노드 구현
	private class Node{
		private Object data; // 노드의 data 값이 들어감
		private Node next;   // 노드 바로 다음 노드 next
	
	// 생성자 구현	
		public Node(Object input) { 
			this.data = input; // input 값 설정
			this.next = null; // next 값은 우선 null
		}
		
		public String toString() {
			return String.valueOf(this.data);
		}
	}
	
	// 첫번째(0번) 자리에 노드를 추가하는 함수 
	public void addFirst(Object input) {
		Node newnode = new Node(input);
		newnode.next = head; // 새로운 노드의 해드(첫번째 노드였던애를) next로 걸어주면 2번째로 옮겨감
		head = newnode; // head를 newnode로 설정하면 newnode가 첫번째 node가 된다. 
		size++; // node 사이즈 증가
		
		if(head.next == null) { // 만약 head.next 첫번째 노드의 다음이 없다면? 첫번째 노드가 리스트에서 오직 한개뿐인 노드라면
			tail = head; // tail 은 head로 설정한다.
		}
		
	}
	
	public void addLast(Object input){
		    Node newNode = new Node(input); // 새로운 노드 생성
		    if(size == 0){ //리스트의 사이즈가 0이다 == 노드가 아무것도 없다.
			addFirst(input); // 첫번째 추가하는 것처럼 노드를 추가한다.
		    } else { // 노드가 존재한다
			tail.next = newNode; //tail.next 테일이 가르키는 노드의 next가 새로운 node가 된다. 
			tail = newNode; // tail은 이제 새롭게 추가된 노드
			size++; //리스트 사이즈 증가
		    }
	}
	Node node(int index) {
		    Node x = head;
		    for (int i = 0; i < index; i++)
			x = x.next;
		    return x;
			}
			
	public void add(int k, Object input){
		    if(k == 0){
			addFirst(input);
		    } else {
			Node temp1 = node(k-1);
			Node temp2 = temp1.next;
			Node newNode = new Node(input);
			temp1.next = newNode;
			newNode.next = temp2;
			size++;
			if(newNode.next == null){
			    tail = newNode;
        }
    }
}

public String toString(){
	if(head == nul){
	return "[ ]";
	}
	// node에 head(첫번째 데이터) 삽입한다.
	Node temp = head;
	String str ="[" ;

	// temp가 지금은 head로 설정되어 있고 이후 temp = temp.next를 통해서 한칸씩 옆으로 이동한다.
	while(temp.next != null){
		str += temp.data + ",";
		temp = temp.next;
	}
	str += temp.data;
	return str + "]";
}

// 첫번째 노드를 삭제하는 함수
public Object removeFirst() {
	Node temp = head;
	head = head.next;
	Object returnData = temp.data;
	temp = null;
	size --;
	return returnData;
}


public Object remove(int k){
	// k가 0이라는 것은 첫번째 값이다.
	if(k == 0){
	removeFirst();
	}
	// 이전 노드를 temp에 저장한다.
	Node temp = node(k-1);
	// 삭제할 노드도 tododeleted에 저장한다. -> 이 값에 접근을 해야하므로
	Node todoDeleted = temp.next;
	//temp next next는 1 -> 2 -> 3 에서 1 ->-> 3이 되는 과정이다.
	temp.next = temp.next.next;
	//returnData 에 tododeleted를 저장
	Object returnData = todoDeleted;
	//tododeleted가 tail 즉 마지막일때 삭제
	if(todoDeleted == tail){
	tail = temp;
	}
	todoDeleted = null;
	size --;
	return returnData;
}

// 마지막 tail을 삭제하는 함수
public Object removeLast(){
	//size = 현재 크기 크기에서 한단계 줄이면 tail전의 노드를 선택할 수 있다.
	return remove(size-1);
}


public int size(){
	// 사이즈를 함수에서 추가나 삭제가 발생할때마다 값을 변경해 줬기 때문에 가능함
	return size;
}

public Object get(int k){
	//찾고 싶은 노드의 순서 k를 인자로 받아서 k번째 node의 값을 찾음
Node temp = node(k);
return temp.data;
}


// 데이터를 통해서  노드의 인덱스 정보 검색 함수
public int indexOf(Object data){
	Node temp = head;
	int index = 0;
	// 인자 data 값이 head의 값과 같은지 비교
	while(temp.data != data){
	// 같지 않으면 temp 노트 한칸 옆 노드로 이동
		temp = temp.next;
		index++;
	// if(temp == null)는 범위 밖의 값이 입력되음을 의미
		if(temp == null){
			return -1;
		}
	}
	return index;
}


public ListIterator listIterator(){
	return new ListIterator();
}

class ListIterator(){
	private Node lastReturned;
	private Node next;
	private int nextIndex;

	ListIterator(){
	next = head;
	}
	public Object next(){
	lastReturned = next;
	next = next.next;
	nextIndex++;
	return lastReturned.data;
	}
}

public boolean hasNext() {
    return nextIndex < size();
}

public void add(Object input){
    Node newNode = new Node(input);
    if(lastReturned == null){
        head= newNode;
        newNode.next = next;
    } else {
        lastReturned.next = newNode;
        newNode.next = next;
    }
    lastReturned = newNode;
    nextIndex++;
    size++;
}

public void remove(){
    if(nextIndex == 0){
        throw new IllegalStateException();
    }
    LinkedList.this.remove(nextIndex-1);
    nextIndex--;
}


}

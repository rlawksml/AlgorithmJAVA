 package doublylinkedlist;
import java.util.*;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class DoublyLinkedlist {

	private Node head;
	private Node tail;
	private int size=0;
	
	private class Node{
		private Object data;
		private Node next;
		private Node prev;
		
		public Node(Object input) {
			this.data = input;
			this.next = null;
			this.prev = null;
		}
		
		public String toString() {
			return String.valueOf(this.data);
		}
	}
	
	public void addFirst(Object input) {
		Node newnode = new Node(input);
		newnode.next = head;
		if(head != null)
			head.prev = newnode;
		head = newnode;
		size++;
		if(newnode.next == null) {
			tail = head;
		}
	}
	
	public void addLast(Object input) {
		Node newnode = new Node(input);
		if(head == null) {
			addFirst(input);
		}
		else {
			tail.next = newnode;
			newnode.prev = tail;
			tail = newnode;
			size ++;	
		}			
	}
	
	public Object removeFirst() {
		Node temp = head;
		head = head.next;
		Object returnData = temp.data;
		if(head != null) {
			head.prev = null;
		}
		temp = null;
		size--;
		return returnData;
		
	}
	
	Node node(int k){
		Node temp = head;
		for(int i = 0; i<k; i++) {
			temp = temp.next;
		}
		return temp;
		
	}
	
	public Object remove(int k) {
		if(k == 0) {
			return removeFirst();
		}
		Node temp = node(k-1);
		Node todoDeleted = temp.next;
		temp.next = temp.next.next;
		if(temp.next != null) {
			temp.next.prev = temp;
		}
		Object returnData = todoDeleted.data;
		if(todoDeleted == tail) {
			tail = temp;	
		}
		todoDeleted = null;
		size--;
		return returnData;
		
	}
	public Object removeLast() {
		return remove(size-1);
/*		if(tail == head) {
			return removeFirst();
		}
		Node temp = tail;
		Node temp2 = node(size-1);
		temp2.next = null;
		tail = temp2;
		Object returnData = temp.data;
		size --;
		
		return returnData;
*/
	}
	
	public int size() {
		return size;
	}
	public Object get(int k) {
		Node temp = node(k);
		return temp.data;
	}
	
	public int indexOf(Object data) {
		Node temp = head;
		int index = 0;
		while(temp.data != data) {
			temp = temp.next;
			index++;
			if(temp == null) {
				return -1;
			}
		}
		
		return index;
	}
	
	public class ListIterator{
		private Node lastReturned;
		private Node next;
		private int nextIndex;
		
		ListIterator(){
			next = head;
			nextIndex = 0;
		}
		public Object next() {
			lastReturned = next;
			next = next.next;
			nextIndex++;
			return lastReturned.data;
		}
		public boolean hasnext() {
			return nextIndex < size();
		}
	}
	
	
}
